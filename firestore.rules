rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 認証されているユーザーのみアクセス可能
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // プロジェクトのオーナーかどうかをチェック
    function isProjectOwner(projectId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/projects/$(projectId)) &&
        get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;
    }
    
    // プロジェクトのルール
    match /projects/{projectId} {
      // 読み取り: オーナーのみ
      allow read: if isAuthenticated() && resource.data.ownerUid == request.auth.uid;
      
      // 作成: 認証済みユーザーで、ownerUidが自分のuidと一致
      allow create: if isAuthenticated() && 
        request.resource.data.ownerUid == request.auth.uid &&
        request.resource.data.keys().hasAll(['projectName', 'aspiration', 'feeling', 'ownerUid', 'createdAt']);
      
      // 更新: オーナーのみ、ownerUidは変更不可
      allow update: if isProjectOwner(projectId) && 
        request.resource.data.ownerUid == resource.data.ownerUid;
      
      // 削除: オーナーのみ
      allow delete: if isProjectOwner(projectId);
      
      // 習慣要素のルール
      match /habit_elements/{elementId} {
        allow read, write: if isProjectOwner(projectId);
        
        // MAPセットのルール
        match /map_sets/{mapSetId} {
          allow read, write: if isProjectOwner(projectId);
        }
      }
      
      // 履歴のルール
      match /history/{historyId} {
        allow read: if isProjectOwner(projectId);
        allow create: if isProjectOwner(projectId) &&
          request.resource.data.keys().hasAll(['checkedAt', 'reflection', 'design_snapshot']);
        allow update, delete: if false; // 履歴は編集・削除不可
      }
    }
  }
}