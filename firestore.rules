rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 認証されているユーザーのみアクセス可能
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // プロジェクトのルール
    match /projects/{projectId} {
      // 読み取り: 認証済みユーザーで、自分のプロジェクトのみ
      allow read: if isAuthenticated() && resource.data.ownerUid == request.auth.uid;
      
      // 作成: 認証済みユーザーで、ownerUidが自分のuidと一致
      allow create: if isAuthenticated() && 
        request.resource.data.ownerUid == request.auth.uid &&
        request.resource.data.keys().hasAll(['projectName', 'aspiration', 'feeling', 'ownerUid', 'nextCheckDate']);
      
      // 更新: 認証済みユーザーで、オーナーのみ、ownerUidは変更不可
      allow update: if isAuthenticated() && 
        resource.data.ownerUid == request.auth.uid &&
        request.resource.data.ownerUid == resource.data.ownerUid;
      
      // 削除: 認証済みユーザーで、オーナーのみ
      allow delete: if isAuthenticated() && 
        resource.data.ownerUid == request.auth.uid;
      
      // 習慣要素のルール
      match /habit_elements/{elementId} {
        allow read, write: if isAuthenticated() && 
          get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;
        
        // MAPセットのルール
        match /map_sets/{mapSetId} {
          allow read, write: if isAuthenticated() && 
            get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;
        }
      }
      
      // 履歴のルール
      match /history/{historyId} {
        allow read: if isAuthenticated() && 
          get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;
        allow create: if isAuthenticated() && 
          get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid &&
          request.resource.data.keys().hasAll(['checkedAt', 'reflection', 'design_snapshot']);
        allow update, delete: if false; // 履歴は編集・削除不可
      }
    }
    
    // 習慣記録のルール
    match /habitRecords/{recordId} {
      // recordIdの形式: {userId}_{habitElementId}_{date}
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.keys().hasAll(['habitElementId', 'projectId', 'userId', 'date', 'status']);
      
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId;
      
      allow delete: if false; // 記録は削除不可
    }
  }
}